# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import protos.GithubGrader_pb2 as GithubGrader__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in GithubGrader_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PopularityServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPopularityData = channel.unary_unary(
                '/github_grader.PopularityService/GetPopularityData',
                request_serializer=GithubGrader__pb2.PopularityRequest.SerializeToString,
                response_deserializer=GithubGrader__pb2.PopularityReply.FromString,
                _registered_method=True)


class PopularityServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPopularityData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PopularityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPopularityData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPopularityData,
                    request_deserializer=GithubGrader__pb2.PopularityRequest.FromString,
                    response_serializer=GithubGrader__pb2.PopularityReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'github_grader.PopularityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('github_grader.PopularityService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PopularityService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPopularityData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/github_grader.PopularityService/GetPopularityData',
            GithubGrader__pb2.PopularityRequest.SerializeToString,
            GithubGrader__pb2.PopularityReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ActivityServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetActivityData = channel.unary_unary(
                '/github_grader.ActivityService/GetActivityData',
                request_serializer=GithubGrader__pb2.ActivityRequest.SerializeToString,
                response_deserializer=GithubGrader__pb2.ActivityReply.FromString,
                _registered_method=True)


class ActivityServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetActivityData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ActivityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetActivityData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActivityData,
                    request_deserializer=GithubGrader__pb2.ActivityRequest.FromString,
                    response_serializer=GithubGrader__pb2.ActivityReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'github_grader.ActivityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('github_grader.ActivityService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ActivityService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetActivityData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/github_grader.ActivityService/GetActivityData',
            GithubGrader__pb2.ActivityRequest.SerializeToString,
            GithubGrader__pb2.ActivityReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CodeQualityServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCodeQualityData = channel.unary_unary(
                '/github_grader.CodeQualityService/GetCodeQualityData',
                request_serializer=GithubGrader__pb2.CodeQualityRequest.SerializeToString,
                response_deserializer=GithubGrader__pb2.CodeQualityReply.FromString,
                _registered_method=True)


class CodeQualityServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCodeQualityData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CodeQualityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCodeQualityData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCodeQualityData,
                    request_deserializer=GithubGrader__pb2.CodeQualityRequest.FromString,
                    response_serializer=GithubGrader__pb2.CodeQualityReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'github_grader.CodeQualityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('github_grader.CodeQualityService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CodeQualityService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCodeQualityData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/github_grader.CodeQualityService/GetCodeQualityData',
            GithubGrader__pb2.CodeQualityRequest.SerializeToString,
            GithubGrader__pb2.CodeQualityReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CollaborationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCollaborationData = channel.unary_unary(
                '/github_grader.CollaborationService/GetCollaborationData',
                request_serializer=GithubGrader__pb2.CollaborationRequest.SerializeToString,
                response_deserializer=GithubGrader__pb2.CollaborationReply.FromString,
                _registered_method=True)


class CollaborationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCollaborationData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CollaborationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCollaborationData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCollaborationData,
                    request_deserializer=GithubGrader__pb2.CollaborationRequest.FromString,
                    response_serializer=GithubGrader__pb2.CollaborationReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'github_grader.CollaborationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('github_grader.CollaborationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CollaborationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCollaborationData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/github_grader.CollaborationService/GetCollaborationData',
            GithubGrader__pb2.CollaborationRequest.SerializeToString,
            GithubGrader__pb2.CollaborationReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ProfileServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCompleteProfile = channel.unary_unary(
                '/github_grader.ProfileService/GetCompleteProfile',
                request_serializer=GithubGrader__pb2.ProfileRequest.SerializeToString,
                response_deserializer=GithubGrader__pb2.ProfileReply.FromString,
                _registered_method=True)


class ProfileServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCompleteProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProfileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCompleteProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompleteProfile,
                    request_deserializer=GithubGrader__pb2.ProfileRequest.FromString,
                    response_serializer=GithubGrader__pb2.ProfileReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'github_grader.ProfileService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('github_grader.ProfileService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ProfileService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCompleteProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/github_grader.ProfileService/GetCompleteProfile',
            GithubGrader__pb2.ProfileRequest.SerializeToString,
            GithubGrader__pb2.ProfileReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
